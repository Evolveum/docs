- id: 'A.5.1'
  title: 'Policies for information security'
  type: [ 'preventive' ]
  comment: 'Information security policy (top management), topic-specific policies'
  necessity: optional
  features: [ 'reporting', 'simulation', 'audit-trail', 'application-inventory' ]
  igaCapabilities: [ 'identity-analytics' ]
  implementation:
      overview: >
          MidPoint can provide essential data for definition and maintenance of security policies.
          MidPoint reporting can be used to extract information from identity data (identity analytics).
          Simulation capabilities can be used to predict the effect of proposed policies, especially for topic-specific policies.
# SAMPLE: report for topic-specific policy?

- id: 'A.5.2'
  title: 'Information security roles and responsibilities'
  type: [ 'preventive' ]
  comment: 'RBAC, mostly for security personnel'
  necessity: necessary
  features: [ 'rbac', 'role-governance', 'simulation', 'application-inventory', 'organizational-structure', 'certification', 'escalation' ]
  igaCapabilities: [ 'policy-and-role-management' ]
  implementation:
      overview: >
          MidPoint provides essential management capabilities of roles and responsibilities by using its advanced role-based access control (RBAC) mechanisms.
          Roles can be defined in midPoint, including all necessary privileges, role hierarchies, policies and descriptive data, especially for security personnel (e.g. security manager).
          Role governance can be managed in midPoint, recording role owners and approvers.
          Similar governance can be applied to application catalog, getting governance closer to assets.
          Organizational structure feature can be used to assign collective responsibilities, e.g. common responsibilities and privileges of security teams.
          Escalation capability can be used to maintain accountability of upper management, making sure that the delegated responsibilities are conducted in a timely manner.
          Simulation capability can be used to predict effect of role model changes.
      rationale: >
          MidPoint is necessary for consistent application of security roles and responsibilities.
          Security personnel often have elevated privileges.
          MidPoint can make sure the privileges are properly recorded, that they are automatically revoked when needed, that the privileges are regularly re-certified.
          While, in theory, this can be done manually, it is not practical and there may be issues in consistent management of privileges and their timely revocation.
# TODO: needs more work, compare with other RBAC-related controls
# SAMPLE: Role owners, ???

- id: 'A.5.3'
  title: 'Segregation of duties'
  type: [ 'preventive' ]
  comment: 'SoD'
  necessity: necessary
  features: [ 'sod', 'policy-rule', 'meta-role', 'gradual-policy-enforcement', 'approval-process', 'authorization', 'reporting' ]
  igaCapabilities: [ 'policy-and-role-management' ]
  igaFunctions: [ 'sod' ]
  implementation:
      overview: >
          MidPoint can manage, monitor and enforce segregation of duties (SoD) policies through the organization.
          SoD policies can be defined on role level (role exclusion) or role-class level (meta-role), with selective enforcement.
          The policies can be enforced gradually, reporting policy violations first, gradually addressing them, applying full policy enforcement when all violations are addressed.
          SoD violations can be optionally driven through approval process to "legalize" them.
      rationale: >
          MidPoint is necessary, as SoD policy cannot be practically enforced manually on large number of roles, and large number of role assignment changes.
          SoD evaluation and enforcement must be automated to be practical.
      plan: >
          Add SoD widget to pre-configured Compliance dashboard.
          Create sample and docs configurations for gradual SoD enforcement.
# SAMPLE: SoD gradual enforcement: define SoD policy, report violations, set up dashboard, clean up violations, enforce the policy
# CONFIG: pre-configured reports: SoD policies (roles with SoD exclusions), SoD violations

- id: 'A.5.4'
  title: 'Management responsibilities'
  type: [ 'preventive' ]
  necessity: not-applicable

- id: 'A.5.5'
  title: 'Contact with authorities'
  type: [ 'preventive', 'corrective' ]
  necessity: not-applicable

- id: 'A.5.6'
  title: 'Contact with special interest groups'
  type: [ 'preventive', 'corrective' ]
  necessity: not-applicable

- id: 'A.5.7'
  title: 'Threat intelligence'
  type: [ 'preventive', 'detective', 'corrective' ]
  necessity: marginal
  features: [ 'object-lifecycle', 'audit-trail', 'object-metadata', 'object-history', 'reporting' ]
  igaCapabilities: [ 'lifecycle' ]
  implementation:
      overview: >
          MidPoint can provide additional information for operational threat intelligence, such as current or past access rights of users affected by a threat.

- id: 'A.5.8'
  title: 'Information security in project management'
  type: [ 'preventive' ]
  comment: 'Project management'
  necessity: necessary
  features: [ 'organizational-structure', 'archetype', 'delegated-administration', 'relation', 'authorization', 'information-classification' ]
  igaCapabilities: [ 'lifecycle', 'policy-and-role-management' ]
  igaFunctions: [ 'organizational-structure' ]
  implementation:
      overview: >
          MidPoint can manage projects as organizational units, including project governance information (managers, sponsors, reviewers).
          Privileges necessary for project members and managers can be assigned automatically.
          As midPoint organizational structures act as roles (abstract roles), all necessary policies and privileges for project can be defined centrally (project meta-role or archetype) or on per-project level.
          Projects can be automatically represented by entitlements, e.g. automatically creating and managing Active Directory groups for projects.
          Delegated administration can be used to allow project managers to control certain aspects of the projects (e.g. project name, description and membership).
      rationale: >
          MidPoint is necessary, as the project-related policies cannot be practically enforced manually on large number of roles, and large number of project membership changes.
          If not automated, access rights associated with the projects are usually assigned to users, and never removed.
          Retaining access rights related to closed projects and former project members usually result in  severe over-provisioning.
          Access control related to project management must be automated to be secure and practical.
      plan: >
          Add "project" as a built-in pre-configured archetype.
          Create sample and docs configurations for project management.
# SAMPLE: Project management: manage AD project groups, manage membership, authorizations for project manager to modify project (maybe members)

- id: 'A.5.9'
  title: 'Inventory of information and other associated assets'
  type: [ 'preventive' ]
  comment: 'Asset management'
  necessity: optional
  features: [ 'role-governance', 'application-inventory', 'relation' ]
  igaCapabilities: [ 'lifecycle' ]
  implementation:
      overview: >
          MidPoint can manage applications, roles and entitlements that are closely related to assets.
          Application inventory capability of midPoint is essential first step to catalog assets.
          MidPoint capability to maintain various relations of objects can be used to track owners of applications, roles and other asset-related objects.
      plan: >
          Introduce "asset" as a first-class citizen in midPoint (later, in synergy with risk assessment).
# SAMPLE: Compliance dashboard: roles without owners, applications without owners.

- id: 'A.5.10'
  title: 'Acceptable use of information and other associated assets'
  type: [ 'preventive' ]
  comment: 'Acceptable use of assets, informing users, recording access, marking and protecting media'
  necessity: optional
  features: [ 'object-lifecycle', 'audit-trail', 'object-metadata', 'object-history' ]
  implementation:
      overview: >
          MidPoint can use audit trail to record access rights of users that have or had access to assets.
          Object history feature can be used to reveal access rights or users related to an asset in the past.
          Information about the access rights and the reasons for assigning them are recorded in meta-data.
      plan: >
          Provide ability to inform user when gaining a privilege, asking user to confirm acceptance of terms before assigning the privilege.
# SAMPLE: audit log analysis?

- id: 'A.5.11'
  title: 'Return of assets'
  necessity: TODO
  comment: "license management? Device ownership tracking? \"Auth hardware\" - tokens"

- id: 'A.5.12'
  title: 'Classification of information'
  type: [ 'preventive' ]
  comment: 'Establishing classification policy ("rules"), classification scheme, accountability of asset owners'
  necessity: optional
  features: [ 'information-classification', 'role-governance', 'relation', 'policy-rule?', 'TODO' ]
# TODO: figure out how to model classification schemas (lookup table?, policy objects and refs?)
# Use NIS1-SK categories or SANS as an example
# TODO: labels can be used to specify smart policies, e.g. category III roles are certified every quarter, category I roles are certified bi-annually.

- id: 'A.5.13'
  title: 'Labelling of information'
  type: [ 'preventive' ]
  comment: 'Implementing classification policy ("rules"), using classification scheme on applications, roles, etc.'
  necessity: optional
  features: [ 'information-classification', 'application-inventory', 'rbac', 'role-governance', 'relation', 'TODO' ]
# TODO: figure out how to model classification schemas (lookup table?, policy objects and refs?)
# TODO: add clearance to users, and informationLabel to other objects (roles, apps).


- id: 'A.5.14'
  title: 'Information transfer'
  type: [ 'preventive' ]
  comment: 'Limiting information transfer to third parties, e.g. allow access to information only to internal users and externals with NDA'
  necessity: optional
  features: [ 'information-classification', 'policy-rule', 'rbac', 'TODO' ]

# SAMPLE (5.12,5.13.5.14): Set up NIS1-SK classification scheme (categories I,II,III). Set categories as labels for apps and roles.
# Require security training (clearance) for access to category II and III.
# Deny assignment of category III role to any external user without DNA.
# Set certification policies based on role category.
# Q: how to automatically determine label of a role from the apps?

