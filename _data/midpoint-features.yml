# TODO: relative-changes, Script Expression Functions
# TODO: compliance reports
# TODO: where to put these? tolerant attributes, matching rules
# TODO: declarative custom forms?
# TODO: non-person identities (service account management)
#
# Glossary: synchronization situation, focus, projection

- id: abstract-role
  title: Abstract role (concept)
  alias: [ 'Organizational structure and RBAC integration' ]
  description: >
      MidPoint supports traditional role-based access control (RBAC) roles, when used both in provisioning and authorization contexts.
      However, the concept of "role" is much more generic and abstract in midPoint.
      Other objects can act as a role, most notably archetypes, organizational units (orgs) and services.
      Such "abstract roles" may behave in the same way as role behaves.
      E.g. membership in an organizational unit may directly grant privileges and authorizations, without any need for extra configuration.
  related: [ 'rbac', 'archetype', 'org', 'service-concept' ]
  igaFunctions: [ 'identity-types', 'role-based-policies', 'risk-assessment' ]
  since:

- id: access-certification
  title: Access certification
  alias: [ 'Access review', 'Re-certification', 'Access re-certification', 'Attestation' ]
  description: >
      Access certification is a review process aimed at reduction of unnecessary access in the system.
      It works by requesting certification of an access, a process where appropriate reviewers have to certify that access provided to users is still needed.
      Certifications are often carried out in a form of certification campaigns, certifying access of many users at once.
      Alternatively, small micro-certifications can be triggered, certifying access of one particular user.
  related: [ 'micro-certification' ]
  igaFunctions: [ 'certification', 'remediation' ]
  since:

- id: access-request-process
  title: Access request process
  alias: [ 'Access request' ]
  description: >
      Access request process is a mechanism for users to request ad-hoc access to applications.
      The process usually starts with users selecting roles from role catalog into their "shopping cart", submitting the request when appropriate roles are selected.
      Based on policy applied to the roles, midPoint usually starts an approval process, routing each role request to appropriate approvers.
      Once the request is approved, the roles are assigned and the access is automatically granted.
  related: [ 'shopping-cart', 'approval-process' ]
  igaFunctions: [ 'access-request-ui', 'approval-schemes', 'approval-process' ]
  since:

- id: actions
  title: Actions
  alias: [ 'Bulk actions', 'Scripted actions', 'MidPoint Scripting' ]
  description: >
      Automated actions that can process many objects in an automated way.
      E.g. actions can be used to activate (enable) many users at once, validate and clean up the data, or remove obsolete data.
  igaFunctions: [ 'lifecycle-state-model' ]
  since:

- id: admin-gui
  title: Administration user interface
  alias: [ 'Admin GUI' ]
  description: >
      Administration user interface is a web-based application used to configure and manage midPoint.
      It is meant to be used by system administrators, identity engineers deploying and configuring midPoint, and also by delegated administrators, managing identities.
      The user interface has a customizable look and feel.
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'customizable-reports-and-visualizations', 'basic-audit-trail-access', 'complex-audit-reporting' ]
  since:

- id: applicable-policies
  title: Applicable policies
  alias: [ 'User-friendly policy selection' ]
  description: >
      MidPoint provides significant flexibility when it comes to policies and policy-related configuration.
      The mechanism of applicable policies is grouping policy statements into manageable units, created in a form of meta-roles.
      Meta-roles specifying applicable policies can be applied to roles (and other object types) by a simple selection in the user interface.
      E.g. applicable policy meta-roles can be defined for usual role approval scenarios, such as "approval by manager", "approval by application owner" and "approval by security office".
      Such meta-roles can be selected in user interface and easily applied when a new role is being created.
  related: [ 'meta-role' ]
  igaFunctions: [ 'approval-schemes', 'approval-process' ]
  since:

- id: application-concept
  title: Application (concept)
  description: >
      Application is an essential concept in identity management.
      It represents an application or an application-like service in an organization.
      It is distinct from the concept of identity resource, as one identity resource can be used to manage many applications.
      E.g. directory services such as Active Directory are often used as an identity repository for numerous applications.
      Access to such application is managed indirectly using the directory service, instead of direct integration with the application.
      However, midPoint (and the users) need to know about the applications, as applications and their data are the information assets that need to be managed.
      In midPoint, an application is a pre-defined archetype, making application a sub-type of service concept.
  related: [ 'service-concept', 'archetype' ]
  igaFunctions: [ 'identity-types' ]
  since:

- id: application-inventory
  title: Application inventory
  alias: [ 'Application catalog' ]
  description: >
      Application inventory is a rich list of all the applications and application-like services in an organization.
      MidPoint can list all the relevant applications, and link them to identity resources that are used to manage access to applications.
      Concept of an application is one of the crucial concepts of identity management, hence application inventory is a an essential resource for access control and identity governance.
      MidPoint can act as an authoritative source of application inventory data, or it can pull application inventory data from other source systems.
  related: [ 'application-concept' ]
  igaFunctions: [ 'identity-types' ]
  since:

- id: approval-process
  title: Approval process
  alias: [ 'Approvals', 'Policy-based approvals', 'Approval scheme' ]
  description: >
      Approval process is a natural part of access request process.
      Once a user submits access request, the request is subject to approval by appropriate approvers.
      In midPoint, approval process is dynamic and policy-driven.
      As each role may have its own approval settings and policies, the request may be subdivided to approval by numerous approvers in several approval levels.
      MidPoint dynamically determines the policy, summarizes approver decisions and applies them to the request.
      Approved roles are automatically assigned and applied.
      Approval process is a generic mechanism in midPoint, triggered by policy rules.
      Apart from access request process, approval process can be applied to other scenarios as well, such as approval of role modification.
  related: [ 'access-request-process', 'shopping-cart', 'policy-rule' ]
  igaFunctions: [ 'approval-schemes', 'approval-process', 'approval-accountability', 'process-management' ]
  unique: true
  since:

- id: archetype
  title: Archetype
  description: >
      Archetype specifies fine-grain object types, such as "Person", "Employee", "Student", "Business role", "Application" and so on.
      Archetypes are applied to basic midPoint object types (User, Role, Org, Service).
      In addition to giving objects a type, archetypes act as meta-roles, specifying policy and behavior common to all objects with that archetype.
  related: [ 'common-identity-model', 'meta-role' ]
  igaFunctions: [ 'identity-types', 'role-structure' ]
  since:

- id: assignment
  title: Assignment
  alias: [ 'Relationship' ]
  description: >
      Assignment represent direct relation between midPoint object.
      Its primary use is to assign roles to users, however it has much broader application.
      Assignments can be used to assign users to organizational units, assign owners to roles, associate application roles with applications and so on.
      Assignment is a rich data structure that can contain temporal constraints (validity from-to), parameters and even conditions.
  related: [ 'inducement', 'rbac', 'relation' ]
  igaFunctions: [ 'role-based-policies', 'role-modeling', 'identity-types' ]
  since:

- id: assignment-metadata
  title: Assignment metadata
  description: >
      Metadata are maintained for every assignment and inducement in relevant midPoint objects.
      MidPoint records timestamps and actors when assignment is created and modified.
      Approval information is recorded in the metadata as well, when it is applicable.
  related: [ 'assignment', 'inducement', 'common-identity-model', 'object-metadata', 'value-metadata' ]
  igaFunctions: [ 'metadata-maintenance', 'role-based-policies', 'approval-accountability' ]
  since:

- id: asynchronous-resources
  title: Asynchronous resources
  description: >
      Support for identity resources that are not accessible in a direct, synchronous, CRUD-like way.
      Such a resource can receive commands to add, modify, or delete accounts and other objects, but processes them asynchronously - in an unspecified time.
      Resources that are based on messaging interface are a prime example of asynchronous resources.
  related: [ 'provisioning' ]
  igaFunctions: [ 'identity-resource-management', 'communication-with-remote-systems' ]
  status: experimental
  since: 4.3

- id: attribute-caching
  title: Attribute caching
  alias: [ 'Passive attribute caching' ]
  status: experimental
  description: >
      Ability to store copy of account attribute values in midPoint repository.
      Attribute caching is reducing the need to access identity resources using a connector.
      It also collects the data in midPoint repository, enabling queries that would not be possible otherwise (e.g. combining attribute data, meta-data and governance information in a single query).
  related: [ 'common-identity-model', 'identity-repository', 'resource-schema' ]
  igaFunctions: [ 'identity-attributes', 'identity-state-tracking' ]
  experimentalSince:
  since: 4.9

- id: audit-trail
  title: Audit trail
  alias: [ 'Audit record', 'Auditing' ]
  description: >
      Audit trail is a record of all the activity of the system.
      MidPoint records all the operations into an audit trail, including change in identity objects, roles, policies and configuration changes.
      Audit trail is recorded in a form of externally accessing and documented database table.
      It can be used by external systems (e.g. SIEM systems) to analyze identity management and governance behavior.
      MidPoint administration interface includes the tools to examine the audit trail.
  igaFunctions: [ 'recording-audit-trail', 'basic-audit-trail-access', 'audit-integration', 'approval-accountability' ]
  since:

- id: authorization
  title: Authorization
  alias: [ 'Internal privilege', 'Fine-grained authorization model' ]
  description: >
      Authorization is a complex permission or privilege, allowing midPoint users access to parts of midPoint functionality.
      It is an internal mechanism for access control inside midPoint application, user interface and the services that midPoint exposes.
      Authorization statements are based on the usual subject-action-object triple used by many authorization systems.
      However, midPoint extends the basic structure with numerous additional parameters, making the authorization system extremely powerful.
      Albeit authorizations are meant to express internal access to midPoint functionality, authorization mechanism is well integrated with the usual role-based access control (RBAC) mechanism.
      Such integration allows to manage internal midPoint authorizations using the familiar mechanisms used to management of privileges in external identity resources.
  related: [ 'rbac', 'admin-gui', 'rest-api' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'role-based-policies', 'role-modeling' ]
  since:

- id: auto-scaling
  title: Auto-scaling
  alias:
  description: >
      Ability to automatically scale midPoint cluster in cloud environment, dynamically adding and removing midPoint nodes.
  related: [ 'ha' ]
  since:

- id: case-management
  title: Case management
  alias: [ 'Ticketing' ]
  description: >
      Case management is a process of managing variety of cases where automatic processing is not possible and human interaction is necessary.
      It is a generic functionality used to implement variety of processes, such as approval process, manual provisioning and so on.
      Case management is designed to support unstructured and semi-structured collaborative processes.
  related: [ 'approval-process', 'manual-resources', 'semi-manual-resources' ]
  igaFunctions: [ 'case-management', 'process-management', 'approval-process', 'remediation' ]
  since:

- id: common-identity-model
  title: Common identity management data model
  alias: [ 'Core identity schema', 'Common data model' ]
  description: >
      Common data model for various identity types, such as users, services, roles, organizations.
      Pre-defined common attributes for each identity type.
      Objects have the same basic structure, each object type specifies additional properties.
      All objects can be represented in several data formats (XML, JSON, YAML).
  igaFunctions: [ 'identity-attributes', 'identifier-management', 'identity-types' ]
  since: 1.7

- id: connid-framework
  title: ConnId identity connector framework
  alias: [ 'Identity connectors' ]
  description: >
      ConnId identity connector framework is an open source framework, supporting many identity connectors.
      Identity connectors are used to connect to various identity resources, providing uniform interface to midPoint.
      Therefore, midPoint can work with variety of identity resources, just by plugging in appropriate identity connector.
  related: [ 'provisioning', 'synchronization' ]
  igaFunctions: [ 'identity-resource-management', 'communication-with-remote-systems' ]
  since: 1.7

- id: connid-connector-server
  title: ConnId connector server
  alias: [ 'Remote identity connectors' ]
  description: >
      ConnId server is a small network service that allows remote deployment of identity connectors.
      Connectors that cannot be co-located with midPoint deployment may be deployed in connector server and placed at any convenient network location.
      Connector server is used to access identity resources in remote data centers, provide access from cloud to on-premise systems, or reach otherwise inaccessible network locations.
  related: [ 'connid-framework' ]
  igaFunctions: [ 'identity-resource-management', 'communication-with-remote-systems' ]
  since: 1.7

- id: correlation
  title: Correlation
  alias: [ 'Identity correlation', 'Smart correlation', 'Identity matching' ]
  description: >
      Correlation mechanism detects and decides which identities represent the same entity.
      The usual use of correlation is to find owners for newly-detected accounts.
      Correlation mechanism is querying midPoint repository, looking for candidate owners for an account.
      Identity are usually correlated based on matching values of specific attributes (e.g. personal number).
      Smart correlation can find candidate matches based on probabilistic or human-assisted matching.
  related: [ 'provisioning', 'synchronization' ]
  igaFunctions: [ 'identity-correlation', 'data-feed', 'reconciliation' ]
  since: 1.7
  improved: [ '4.6' ]

- id: dashboard
  title: Dashboard
  description: >
      Dashboard functionality allows configuration of custom dashboards, consisting of small widgets that provide brief at-the-glance information about the system.
      Dashboards are often used to monitor state of midPoint platform, watch the progress of application of new policies or check a summary of operations during a previous day.
  since:

- id: delegated-administration
  title: Delegated administration
  description: >
      Delegated administration is a method of delegating partial administration rights to persons that do not have full system administration entitlements.
      It is often used to delegate management of business roles to selected business persons that are not supposed to gain system administration privileges.
      Authorization mechanism is used in midPoint to implement delegated administration schemes.
  related: [ 'authorization' ]
  igaFunctions: [ 'role-based-policies', 'role-modeling', 'compliance-management' ]
  since:

- id: deputy
  title: Deputy
  description: >
      Deputy mechanism provides ability for ad-hoc delegation of privileges from one user to another.
      It is used mostly for short term delegation of privileges, e.g. delegation for the duration of vacation or time off.
  igaFunctions: [ 'deputy' ]
  since:

- id: documentation
  title: Documentation
  description: >
      MidPoint documentation is publicly available to all midPoint users.
      It is regularly extended and maintained.
  igaFunctions: [ 'compliance-management' ]
  since:

- id: entitlement
  title: Entitlement
  description: >
      Entitlement is a privilege associated to an account in identity resource.
      Whereas roles and assignments refer to access control policy specified in midPoint,
      entitlements and entitlement associations refer to access control objects in the identity resource.
      E.g. Active Directory groups and application privileges are considered to be entitlements.
      Entitlements are always specific to the identity resource (i.e. they are application-specific).
  related: [ 'provisioning', 'entitlement-association', 'rbac' ]
  igaFunctions: [ 'entitlement-lifecycle', 'reconciliation', 'role-based-policies', 'request-fulfillment' ]
  since:

- id: entitlement-association
  title: Entitlement association
  alias: [ 'Association' ]
  description: >
      Entitlement association is relationship between entitlement and account.
      E.g. when an Active Directory account is a member of Active Directory group, midPoint detects that as an association between the account and the entitlement (group).
      Even though entitlements are specific to a particular identity resource, association is a generic mechanism that can be applied uniformly to all identity resources (when properly configured).
  related: [ 'provisioning' ]
  igaFunctions: [ 'entitlement-associations', 'reconciliation', 'request-fulfillment' ]
  since:

- id: escalation
  title: Escalation
  description: >
      Escalation process provides automatic forwarding of a work item in case that the person responsible for the work item fails to acts in a specified time interval.
      Escalation mechanism is usually applied to approvals and certifications, escalating the work item to a manager of the person that failed to react.
  related: [ 'approval-process', 'access-certification' ]
  igaFunctions: [ 'escalation', 'approval-schemes', 'approval-process', 'certification', 'process-management' ]
  since:

- id: expression
  title: Expression
  description: >
      Expression is a generic mechanism to algorithmically create or transform a value.
      It is usually used in mappings, transforming values of common identity data model (e.g. user's full name) to native attributes used by identity resources (e.g. LDAP attribute 'cn').
  related: [ 'provisioning', 'mapping' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since:

- id: expression-constant
  title: Expression constant
  description: >
      Constant is a special type of an expression that has a constant value.
      Value of a constant is defined outside of midPoint application, e.g. in environment-specific configuration file.
      Constants are often used to define environment-specific values, such as host names and root context names.
  related: [ 'provisioning', 'mapping' ]
  igaFunctions: [ 'fulfillment', 'customizable-reports-and-visualizations' ]
  since: 3.6

- id: expression-function-library
  title: Expression function library
  description: >
      Function libraries are dedicated midPoint objects that contain set of reusable functions.
      The functions can be used in other mappings and expressions in midPoint.
      Function libraries can be used to group frequently-used parts of the code, therefore simplifying midPoint configuration and maintenance.
  related: [ 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since: 3.7

- id: expression-groovy
  title: Groovy scripting expression
  description: >
      Support for Groovy language in scripting expressions.
      Groovy is default expression language in midPoint.
  related: [ 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since:

- id: expression-javascript
  title: JavaScript scripting expression
  description: >
      Support for JavaScript/ECMAScript language in scripting expressions.
  related: [ 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since:

- id: expression-profile
  title: Expression profile
  description: >
      Expression profile defines limitations of the means that an expression can use, mostly due to security reasons.
      E.g. expression profile can limit use of scripting languages and classes or libraries within them, to limit the scripts only to safe operations.
      The expressions may be limited to disable use of scripting at all, limiting certain expressions only to the most simple and safe mechanisms.
  related: [ 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since:

- id: expression-python
  title: Python scripting expression
  description: >
      Support for Python language in scripting expressions.
  related: [ 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation', 'customizable-reports-and-visualizations' ]
  since:

- id: extensible-object-types
  title: Extensible object types
  alias: [ 'Custom Schema Extension' ]
  description: >
      Object types defined in common identity data model (schema) are extensible with custom attributes.
  related: [ 'common-identity-model', 'archetype' ]
  igaFunctions: [ 'identity-attributes', 'identity-types', 'lifecycle-state-model' ]
  since:

- id: flexible-authentication
  title: Flexible authentication
  provides: [ 'Multi-factor authentication' ]
  description: >
      MidPoint authentication mechanism is flexible, configurable and customizable.
      It consists of authentication modules that can be combined to complex sequences, adjusting to various authentication requirements.
      MidPoint authentication can support numerous authentication scenarios, including multi-factor authentication and special-purpose alternative authentication needs (e.g. password reset scenarios).
  related: [ 'admin-gui' ]
  since: 4.1

- id: generic-object
  title: Generic object
  description: >
      MidPoint usually works with rich pre-defined object types such as "user", "role" or "service".
      The built-in types are designed to be flexible enough to support almost any identity management use case imaginable.
      However, there may be a rare occasion when a completely unexpected case has to be supported.
      Generic objects are designed to support such a case.
      Being mostly empty objects, generic objects can be customized to any need using object extensibility mechanism.
  related: [ 'common-identity-model', 'extensible-object-types', 'archetype' ]
  igaFunctions: [ 'identity-attributes', 'identity-types', 'lifecycle-state-model' ]
  since:

- id: generic-synchronization
  title: Generic synchronization
  description: >
      Generic synchronization is a generalization of the traditional account-user synchronization principle.
      MidPoint generic synchronization can synchronize any meaningful pair of objects, not just accounts and users.
      MidPoint can synchronize organizational units to Active Directory groups, applications to LDAP service accounts, or mobile device identities to inventory database records.
  related: [ 'provisioning', 'synchronization' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-types', 'data-feed', 'reconciliation' ]
  since:

- id: gradual-policy-enforcement
  title: Gradual policy enforcement
  alias: [ 'Gradual enforcement' ]
  description: >
      Policies can be enforced gradually, in step-by-step fashion.
      As new policies are introduced, policy violations can be reported first, without enforcing the policy.
      Violations can be gradually addressed over a sufficient period of time, applying full policy enforcement when all violations are addressed.
  related: [ 'policy-rule', 'reporting', 'dashboard' ]
  igaFunctions: [ 'compliance-management' ]
  doc:
  since:

- id: ha
  title: High availability
  acronym: HA
  alias: [ 'HA support', 'clustering' ]
  provides: [ 'Enterprise class scalability' ]
  description: >
      MidPoint fully supports highly-available (HA) configurations by the means of midPoint clustering functionality.
      MidPoint can operate a cluster of several modes, working together as a single midPoint instance, coordinated over one midPoint identity repository.
      The HA features provide enterprise class scalability (hundred thousands to millions of users).
  related: [ 'task-management', 'identity-repository' ]
  since:

- id: identity-lifecycle
  title: Identity lifecycle
  alias: [ 'Identity lifecycle management' ]
  description: >
      Identities are not static, they evolve in time.
      There may be a record about the identity before its activation, then the identity becomes active, temporarily suspended, archived and finally deleted.
      In midPoint, every object in midPoint is in certain lifecycle state, specifying its state or maturity for use.
      This principle also applies to all objects that represent identities.
  related: [ 'object-lifecycle', 'common-identity-model' ]
  igaFunctions: [ 'lifecycle-state-model' ]
  glossary: [ 'identity-lifecycle' ]
  since: 3.5

- id: identity-merge
  title: Identity merge
  description: >
      MidPoint administration user interface has an ability to interactively merge two identities into one.
      This functionality is used for ex-post merge of identities, e.g. in case that the correlation did not work correctly and identity duplication is discovered later in the process.
  related: [ 'admin-gui' ]
  igaFunctions: [ 'identity-correlation', 'identity-attributes', 'lifecycle-state-model' ]
  since:

- id: identity-repository
  title: Identity repository
  description: >
      Identity repository is a database that stores midPoint objects.
      It stores all the configuration and data that midPoint needs to operate.
      MidPoint is designed with flexibility in mind, supporting several database engines as options for identity repository.
  related: [ 'common-identity-model', 'midpoint-query-language', 'midpoint-object-language' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  since:

- id: identity-repository-cleanup
  title: Identity repository cleanup
  alias: [ 'Automatic repository cleanup', 'Removal of obsolete information' ]
  description: >
      Automatic cleanup of obsolete and out-of-date information from midPoint identity repository.
      MidPoint gathers variety of information during its operation.
      Part of that information is important for certain time interval, after which it should be removed.
      MidPoint contains a mechanism to clean up the repository by deleting such obsolete data.
  related: [ 'identity-repository' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  since:

- id: identity-repository-postgresql
  title: PostgreSQL identity repository
  alias: [ 'Native PostgreSQL repository' ]
  description: >
      PostgreSQL open source relational database engine can be used as midPoint identity repository.
      PostgreSQL is primary and recommended choice for midPoint identity repository, it supports all midPoint features and provides the best performance.
  related: [ 'identity-repository' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  since:

- id: identity-repository-generic
  title: Generic identity repository
  alias: [ 'Generic repository implementation' ]
  description: >
      MidPoint contains generic identity repository implementation, an implementation that can support several database engines in a generic way.
      This repository implementation is mostly historic, it is only partially maintained.
      It does not support all midPoint features and provides lower performance.
      Use of this repository implementation is deprecated, and it is generally not recommended for production use.
  related: [ 'identity-repository' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  status: deprecated
  since:

- id: inducement
  title: Inducement
  alias: [ 'Indirect relationship' ]
  description: >
      Inducement is an indirect assignment.
      Unlike assignment which grants privileges directly, inducement works indirectly.
      It is used primarily to build role hierarchy in role-based access control (RBAC) structures.
      It can also be used to automatically grant privileges associated with organizational structure membership.
  related: [ 'assignment', 'rbac', 'relation' ]
  igaFunctions: [ 'entitlement-associations', 'role-based-policies', 'role-structure', 'role-modeling' ]
  since:

- id: information-classification
  title: Information classification
  alias: [ 'Classification' ]
  description: >
      Applications and other objects that represent can be classified to categories and levels, describing sensitivity of the assets.
      Classification labels are reflected to the roles, and can be used to construct policies.
  related: [ 'assignment', 'abstract-role', 'archetype', 'policy-rule' ]
  igaFunctions: [ 'compliance-management' ]
  status: planned
  since: 4.9

- id: iteration
  title: Iteration
  alias: [ 'Iterative identifiers' ]
  description: >
      Iteration is mechanism to determine a unique value by iteratively attempting to assign unique identifier, re-trying on failure.
      E.g. it can be used to determine a unique username by trying values such as foobar, foobar2, foobar3, ...
  related: [ 'common-identity-model', 'mapping', 'provisioning', 'object-template' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  since:

- id: linked-objects
  title: Linked objects
  description: >
      Linked objects are objects that are related.
      When one of the objects changes, the other object has to be recomputed to reflect the changes.
      Linked objects mechanism can be used to implement variety of use cases, such as automatic update of nested objects, organization members or devices that belong to a user.
      Note: Linked objects should not be confused with projection links, which is a separate concept.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-types', 'entitlement-associations' ]
  since: 4.2

- id: live-synchronization
  title: Live synchronization
  alias: [ 'Activesync', 'Real-time synchronization' ]
  description: >
      Live synchronization is an identity synchronization mechanism processing incremental changes in real time.
      It detects data changes in identity resource, processing them continuously as they occur.
      Live synchronization is quite fast and rather lightweight synchronization mechanism.
      However, it may be unreliable in some cases, failing to detect some changes.
      Therefore, it is almost always combined with reconciliation.
      Also, live synchronization is resource-specific, it is not supported by all the identity resources and connectors.
  related: [ 'provisioning', 'synchronization', 'mapping', 'expression', 'reconciliation' ]
  igaFunctions: [ 'identity-state-tracking', 'data-feed', 'data-consistency' ]
  since:

- id: localization
  title: Localization
  description: >
      MidPoint user interfaces as well as data in midPoint repository can be localized to various languages and national environments.
      MidPoint user interfaces are using the usual localization mechanism, allowing translations to be added to system using localization files.
      In addition to that, midPoint supports special data type used broadly across the platform: Polystring.
      Polystring can be used to store national variations and translations.
      It can be used for example to provide localized names for roles, services or resources, which is an essential feature for deployments that span several national environments.
  related: [ 'common-identity-model', 'admin-gui', 'self-service-gui', 'polystring' ]
  igaFunctions: [ 'access-request-ui' ]
  since:

- id: lookup-table
  title: Lookup table
  description: >
      Lookup tables are a mechanism how to manage selection and mapping of pre-defined value sets.
      E.g. locales, time zones, cost center codes and similar properties can be managed as lookup tables.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'identity-attributes' ]
  since: 3.1.1

- id: manual-resources
  title: Manual resources
  alias: [ 'Manual connectors' ]
  description: >
      Manual resources are identity resources that are not connected using an automated (on-line) connector.
      Such resources are modified by human administrators, based on instructions provided by midPoint.
  related: [ 'provisioning', 'provisioning-propagation' ]
  igaFunctions: [ 'manual-fulfillment', 'identity-resource-management', 'communication-with-remote-systems' ]
  since:

- id: mapping
  title: Mapping
  description: >
      Mapping is a mechanism that maps properties, transforming the value as needed.
      Mappings are used in provisioning scenarios, transforming values of common identity data model (e.g. user's full name) to native attributes used by identity resources (e.g. LDAP attribute 'cn').
  related: [ 'provisioning', 'expression' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-attributes', 'identifier-management', 'credential-management', 'identity-types', 'entitlement-management', 'entitlement-associations', 'fulfillment', 'identity-correlation' ]
  since:

- id: meta-role
  title: Meta-role
  description: >
      Meta-role is a role applied to other role.
      Meta-role is used to specify policy or behavior common to an entire class of roles.
      E.g. it can be used to specify common behaviour for all application roles linked to Active Directory groups.
  related: [ 'rbac', 'pdrbac' ]
  igaFunctions: [ 'role-based-policies', 'role-structure', 'role-modeling', 'sod' ]
  since:

- id: micro-certification
  title: Micro-certification
  alias: [ 'Ad-hoc access review' ]
  description: >
      Micro-certification is an access certification executed on a small scale, usually certifying single user.
      It is a scaled-down review process aimed at reduction of unnecessary access of a single entity (user).
      It works by requesting certification of an access, a process where appropriate reviewers have to certify that access provided to a user is still needed.
      Micro-certifications are usually triggered, initiated by an automated process after a certain trigger event is detected.
      E.g. micro-certification may be triggered by a user changing position in an organizational structure.
  related: [ 'access-certification' ]
  igaFunctions: [ 'microcertification', 'certification', 'remediation' ]
  since:

- id: midpoint-query-language
  title: MidPoint query language
  alias: [ 'Axiom query language' ]
  description: >
      Objects stored in midPoint repository can be queried using midPoint query language.
      MidPoint query language is a string-based, readable, user-friendly yet powerful query language which is independent of any underlying database technology.
      The query language is using the names for items given by the schema (common identity model), therefore it is using the same names as are used other parts of midPoint.
  related: [ 'common-identity-model', 'midpoint-object-language' ]
  igaFunctions: [ 'identity-attributes', 'customizable-reports-and-visualizations' ]
  since:

- id: midpoint-object-language
  title: MidPoint object language
  description: >
      MidPoint objects have specific structure.
      The consist of items, such as properties, containers and references.
      Object structure is defined by the schema, which forms the common identity model of midPoint.
      Objects can be expressed in form of XML, JSON or YAML.
      MidPoint object language is a representation of midPoint objects in any of the above forms.
      It can be used to reliably back-up the data, transfer them between systems, it can be used for diagnostics, as configuration samples, or for sharing snippets and ideas.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'identity-attributes', 'customizable-reports-and-visualizations' ]
  since: 1.7

- id: multi-connector-resource
  title: Multi-connector resource
  description: >
      Identity resource is usually handled by a single connector, providing all the operations that the resource needs.
      However, there are cases when more than one connector is needed to handle identity resource correctly.
      There may be scripts that need to be executed after an account is created, e.g. to set up a storage space for home directory.
      The scripting capability is provided by a specialized connector, that can be added to the primary connector handling the resource.
      Moreover, semi-manual resource rely on combination of two connectors: manual connector is used for writing, while ordinary automated connector is used for reading.
      Use of multi-connector resources gives midPoint an incredible provisioning flexibility.
  related: [ 'provisioning', 'provisioning-script' ]
  igaFunctions: [ 'manual-fulfillment', 'identity-resource-management', 'communication-with-remote-systems' ]
  unique: true
  since:

- id: multi-tenancy
  title: Multi-tenancy
  alias: [ 'Partial multi-tenancy' ]
  description: >
      Ability to serve several (partially) isolated customers in a single midPoint instance.
  related:
  since:

- id: notifications
  title: Notifications
  description: >
      Ability to notify users about various events in the system.
      Mostly used to notify users about creation of new account.
  related:
  igaFunctions: [ 'notifications' ]
  since:

- id: object-collection-and-view
  title: Object collection and view
  description: >
      Object collection is a mechanism to specify a group of related objects, e.g. employees, staff affiliated with London office, active users or proposed roles.
      Object collection is a type of midPoint object that defines the collection and gives it a name.
      Collections are accompanied by views, which can used to customize the way how collections are presented.
  related: [ 'common-identity-model', 'admin-gui' ]
  igaFunctions: [ 'identity-attributes', 'customizable-reports-and-visualizations' ]
  since: 4.0

- id: object-history
  title: Object history
  alias: [ 'Time machine' ]
  description: >
      As midPoint records all the operation in audit trail, such information can be used to reconstruct history of object modifications and their past state.
      MidPoint provides simplified user interface for accessing audit records concerning a particular objects, displaying its history.
      User interface can also be used to re-construct a past state of the object.
  related: [ 'audit-trail', 'admin-gui' ]
  igaFunctions: [ 'complex-audit-reporting' ]
  since:

- id: object-lifecycle
  title: Object lifecycle
  provides: [ 'Identity lifecycle state model' ]
  description: >
      Every object in midPoint is in certain lifecycle state, specifying its state or maturity for use.
      Many objects start in "draft" state when being prepared, transitioning to "active" state for operation, ending their life in "archived" state.
      MidPoint provides pre-configured lifecycle model suitable for most situations.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'lifecycle-state-model', 'role-modeling' ]
  since: 3.5

- id: object-mark
  title: Object mark
  description: >
      MidPoint objects can be annotated using special-purpose marks.
      The marks denote special state or behavior of the object, such as special protection, inability to be modified, objects that violate rules or require manual attention.
      Marks can be managed manually or automatically, they can be used in reporting and analytics.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'identity-state-tracking', 'metadata-maintenance', 'customizable-reports-and-visualizations', 'compliance-management' ]
  since: 4.7

- id: object-metadata
  title: Object metadata
  description: >
      Metadata are maintained for every midPoint object.
      MidPoint records timestamps and actors when an object is created and modified.
      Approval information is recorded in the metadata as well, when it is applicable.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'metadata-maintenance', 'lifecycle-state-model', 'identity-attributes', 'approval-process', 'approval-accountability' ]
  since: 3.5

- id: object-template
  title: Object template
  description: >
      Template that specifies details and mappings that govern internal consistency of midPoint objects.
      E.g. object template can specify a mapping to compute user's full name from its components (first name, last name).
      Object template can be used for automatic assignment of roles.
  related: [ 'mapping', 'rbac' ]
  igaFunctions: [ 'identity-attributes', 'role-autoassignment' ]
  since:

- id: org
  title: Organizational structure
  description: >
      MidPoint supports various forms of organizational structures, including hierarchical tree-like structures and flat structures.
      Almost any organizational structure can be modeled in midPoint, as long as it can be expressed in a form of oriented acyclic graph.
      MidPoint supports many organization structures in parallel, where objects can belong to any number of organizational units in any number of structures.
      Organizational unit objects ("orgs") behave in a way similar to roles, allowing direct assignment of organizational unit privileges.
  related: [ 'assignment', 'rbac' ]
  igaFunctions: [ 'identity-types', 'organizational-structure', 'approval-schemes' ]
  since:

- id: outlier-detection
  title: Outlier detection
  description: >
      Outlier detection is a mechanism to detect users and assignments that are not similar to other users.
      Information provided by outlier detection is useful as supporting data for access certification, role modelling and data cleanup.
  related: [ 'role-mining', 'assignment', 'access-certification', 'admin-gui' ]
  igaFunctions: [ 'anomaly-detection' ]
  status: planned
  since: 4.9

- id: overlay-project
  title: Overlay project
  description: >
      As midPoint platform is an open source project, it is open to modification and ultimate customization.
      Overlay project is a convenient and sustainable method to support code-based extensions and modifications of midPoint.
      Overlay project is meant as an ultimate customization mechanism for expert engineers to support complex and unusual requirements.
  igaFunctions: [ 'customizable-reports-and-visualizations' ]
  since:

- id: parametric-role
  title: Parametric role
  description: >
      Parametric role is a role (in role-based access control sense) which is dynamic, its behavior is based on parameters.
      The parameters are usually specified in assignment, customizing role behavior specifically for every user that has the role assigned.
  related: [ 'rbac', 'assignment', 'pdrbac' ]
  igaFunctions: [ 'role-based-policies', 'role-structure' ]
  since:

- id: password-management
  title: Password management
  description: >
      MidPoint can manage user password in several ways.
      MidPoint can store password (in encrypted or hashed) form in midPoint identity-repository.
      MidPoint can distribute the password to connected identity resources, e.g. in case that new account is created or password is changed.
      This is a way to keep account passwords synchronized.
      As password management is centralized in midPoint, company-wide password policies can be centrally enforced, such as password complexity rules and retention policy.
      MidPoint is automatically maintaining password meta-data, such as information when the password was changed and who has changed it.
      Self-service user interface contains mechanisms for self-service password management and password reset.
  related: [ 'user-concept', 'service-concept', 'self-service-gui' ]
  igaFunctions: [ 'credential-management' ]
  since: 1.7

- id: password-policy
  title: Password policy
  description: >
      Password policy specifies the complexity requirements for acceptable password, as well as means to further customize the policy.
      MidPoint password policy is meant validate password, yet it is also designed to generate passwords that are compliant with the policy.
  related: [ 'password-management' ]
  igaFunctions: [ 'credential-management' ]
  since:

- id: pdrbac
  title: Policy-driven role-based access control
  acronym: PDRBAC
  description: >
      Dynamic roles-based access control (RBAC) mechanism, driven by policy statements and expressions.
  related: [ 'rbac', 'expression', 'mapping', 'object-template' ]
  igaFunctions: [ 'role-based-policies', 'role-structure' ]
  unique: true
  since:

- id: persona
  title: Persona
  description: >
      Persona is a virtual identity - alternative representation of physical person.
      Personas are associated with their primary identities, sharing selected data items.
  igaFunctions: [ 'personas', 'identity-types' ]
  since: 3.6

- id: policy-rule
  title: Policy rule
  description: >
      Policy rules provide a generic mechanism to set up policies and policy constraint in the system.
      E.g. a policy rule may specify that all departments must have exactly one manager, or that each business role must have at least one owner.
      Many midPoint features are implemented by policy rules, most notably approval policies, segregation of duties and triggered micro-certifications.
  igaFunctions: [ 'approval-schemes', 'approval-process', 'microcertification', 'risk-based-triggers', 'compliance-management' ]
  since: 3.6

- id: polystring
  title: Polystring
  description: >
      Polystring is a string-based data type that can store a string value in several forms.
      It is used primarily in international environment.
      It can be used to store string values in normalized form, e.g. transliterating national characters to plain ASCII characters).
      It can also be used to store several versions of the string, localized to various national representation.
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'identity-attributes' ]
  since:

- id: power-of-attorney
  title: Power of attorney
  description: >
      Power of attorney feature allows one user to act in the name of another user.
      This feature can be used to allow managers of approvers to see their work items and act upon them.
      Ability to assume power of attorney is controlled by authorization mechanism.
      The implementation is still somehow limited.
  related: [ 'authorization' ]
  igaFunctions: [ 'compliance-management', 'deputy' ]
  since: 3.7

- id: projection-link
  title: Projection link
  alias: [ 'Account link', 'Account linking' ]
  description: >
      The term "projection" describes an object in identity resource, which is an representation of an identity.
      Projection is usually an user account in application.
      Projections are linked to the identity which they represent, e.g. user account is linked to the user that is an owner of the account.
      MidPoint is automatically establishing the links (e.g. using correlation) and maintaining them, keeping track of projection owners at all times.
  related: [ 'common-identity-model', 'correlation', 'provisioning' ]
  igaFunctions: [ 'identity-types', 'entitlement-lifecycle', 'reconciliation', 'data-consistency', 'orphan-detection' ]
  since: 1.7

- id: projection-policy
  title: Projection policy
  alias: [ 'Assignment Policy Enforcement' ]
  description: >
      MidPoint is usually fully enforcing projection consistency, which means that is a project should not exist (there is no assignment for it), the projection is deprovisioned (deleted or deactivated).
      E.g. if there is no role specifying that a particular account should exist, then such account is deleted.
      This is the usual approach for target resources.
      However, it does not work well for source resources, where appropriate assignment or role does not exist.
      In such cases, projection policy setting can be used to adjust the enforcement of projection consistency.
  related: [ 'projection-link', 'provisioning' ]
  igaFunctions: [ 'entitlement-lifecycle', 'identity-state-tracking', 'reconciliation', 'data-consistency' ]
  since:

- id: protected-accounts
  title: Protected accounts
  description: >
      MidPoint can protect specific accounts against any change.
      Such accounts cannot be modified or deleted from midPoint, they will not be reconciled or otherwise synchronized.
      Protected account feature could be used to protect sensitive or system accounts, such as emergency recovery accounts.
  related: [ 'provisioning', 'object-mark' ]
  igaFunctions: [ 'identity-state-tracking', 'data-consistency' ]
  since:

- id: provisioning
  title: Provisioning
  alias: [ 'Fulfillment', 'Identity provisioning', 'Deprovisioning' ]
  description: >
      Provisioning is a basic feature of identity management platform.
      It makes sure user accounts are properly created on identity resources, that their attributes are set to correct values, that the account has correct group membership and so on.
      In midPoint, provisioning also takes care of inbound processing, dealing with data feeds coming from source systems.
  related:
  igaFunctions: [ 'entitlement-lifecycle', 'entitlement-associations', 'identity-resource-management', 'communication-with-remote-systems', 'fulfilment-failure-handling', 'data-consistency', 'request-fulfillment' ]
  since: 1.7

- id: provisioning-consistency
  title: Provisioning consistency
  alias: [ 'Consistency mechanism', 'Provisioning robustness', 'Provisioning re-tries', 'Self-healing data' ]
  description: >
      Provisioning mechanism in midPoint is robust, making sure that data in identity resources (e.g. accounts) are as consistent as possible.
      E.g. midPoint can deal with systems that are off-line or inaccessible.
      Operations that cannot be completed immediately are persistently stored and re-tried later.
      MidPoint can opportunistically detect that a legal account was deleted, re-creating the account with appropriate attributes.
      MidPoint can detect that a conflicting account exists when attempting to create a new account, processing the existing account before proceeding.
      Overall, midPoint will try to make the account data as correct as possible, automatically correcting any errors that it discovers.
  related: [ 'provisioning' ]
  igaFunctions: [ 'data-consistency', 'communication-with-remote-systems', 'fulfilment-failure-handling' ]
  since:

- id: provisioning-dependencies
  title: Provisioning dependencies
  description: >
      Provisioning dependencies deal with accounts and other object that depend on each other.
      E.g. in case that operating system account must be created before database administration account is created.
      MidPoint takes care that the accounts are created and deleted in the correct order.
  related: [ 'provisioning' ]
  igaFunctions: [ 'identity-resource-management', 'fulfilment-failure-handling', 'data-consistency' ]
  since:

- id: provisioning-propagation
  title: Provisioning propagation
  alias: [ 'Delayed provisioning', 'Provisioning operation grouping' ]
  description: >
      Propagation of provisioning changes to identity resources may be delayed, optionally combining several pending changes into a single change.
      This feature helps to reduce the number of operations on identity resources, reducing load on target resources and making resource logs more readable.
      It is a crucial feature for manual resources, reducing the number of operations that human administrators have to carry out.
  related: [ 'provisioning' ]
  igaFunctions: [ 'communication-with-remote-systems', 'fulfilment-failure-handling', 'manual-fulfillment' ]
  since: 3.7.1

- id: provisioning-script
  title: Provisioning script
  description: >
      Scripts executed before and/or after specific provisioning operation.
      E.g. scripts that create home directory or mailbox after account is created, script that archives home directory after an account is deleted.
  related: [ 'provisioning' ]
  igaFunctions: [ 'communication-with-remote-systems', 'data-consistency' ]
  since:

- id: rbac
  title: Role-based access control
  acronym: RBAC
  description: >
      Access control and provisioning based on concept of roles.
      MidPoint roles can form a hierarchy by using inducement relations.
  related:
  igaFunctions: [ 'role-based-policies', 'role-structure', 'role-modeling' ]
  since:

- id: reconciliation
  title: Reconciliation
  alias: [ 'Identity reconciliation', 'Data reconciliation' ]
  description: >
      Reconciliation is an identity synchronization mechanism that compares existing values of account attributes with values stored in indentity repository and/or computed by a policy.
      As all synchronization mechanisms, reconciliation has an ability to correct the values.
      As reconciliation compares all the accounts one-by-one, it is rather heavy-weight, yet very reliable mechanism.
  related: [ 'provisioning', 'synchronization', 'mapping', 'expression', 'live-synchronization' ]
  igaFunctions: [ 'reconciliation', 'fulfilment-failure-handling', 'identity-state-tracking', 'data-feed', 'data-consistency', 'orphan-detection' ]
  since:

- id: reporting
  title: Reporting
  description: >
      Reporting features provide ability to create pre-defined and custom reports, reporting on data stored in midPoint identity repository.
      Reports can be scheduled or executed ad-hoc using the administration interface.
  related: [ 'admin-gui' ]
  igaFunctions: [ 'customizable-reports-and-visualizations', 'compliance-management' ]
  since:

- id: resource-wizard
  title: Resource wizard
  description: >
      Resource wizard is a part of midPoint administration user interface, dedicated to configuration of identity resources.
      Resource wizard is used to easily connect source and target resources in an interactive and user friendly manner.
  related: [ 'admin-gui', 'provisioning', 'synchronization', 'mapping', 'expression', 'live-synchronization' ]
  igaFunctions: [ 'identity-resource-management', 'data-feed', 'reconciliation' ]
  since:

- id: rest-api
  title: REST API
  description: >
      MidPoint is exposing vast majority of its functionality by the means of HTTP-based RESTful interface (API).
  since:

- id: relation
  title: Relation
  alias: [ 'Relationship type' ]
  description: >
      Relation specifies type of relationship between two objects.
      E.g. it distinguishes whether a user is an member or an owner of a role, whether user is a member or manager of organizational unit, whether user is a reader, writer or administrator of a service and so on.
      Relations are primarily used as a parameter in assignments.
  related: [ 'assignment', 'inducement', 'rbac' ]
  igaFunctions: [ 'role-based-policies', 'role-structure', 'role-modeling', 'approval-schemes' ]
  since:

- id: representation-xml
  title: Object representation in XML
  description: >
      MidPoint configuration and data objects can be represented in XML form.
  related: [ 'midpoint-object-language', 'common-identity-model' ]
  since: 1.7

- id: representation-json
  title: Object representation in JSON
  description: >
      MidPoint configuration and data objects can be represented in JSON form.
  related: [ 'midpoint-object-language', 'common-identity-model' ]
  since:

- id: representation-yaml
  title: Object representation in YAML
  description: >
      MidPoint configuration and data objects can be represented in YAML form.
  related: [ 'midpoint-object-language', 'common-identity-model' ]
  since:

- id: resource-schema
  title: Rosource schema
  alias: [ 'Rosource schema discovery' ]
  description: >
      MidPoint can automatically discover schema of an identity resource.
      Object classes, their attributes and attribute types can be discovered and automatically used by midPoint.
      MidPoint discovers and categorized identifiers for each object class, distinguishing primary and secondary indentifiers.
  related: [ 'provisioning',  'common-identity-model']
  igaFunctions: [ 'identity-attributes', 'identifier-management', 'identity-resource-management', 'data-consistency', 'customizable-reports-and-visualizations' ]
  since:

- id: role-autoassignment
  title: Role autoassignment
  alias: [ 'Role autoassign expressions' ]
  description: >
      Expressions specified in roles, determining when a role should be automatically assigned to a user.
      It is a part of policy-diven RBAC mechanism.
  related: [ 'pdrbac' ]
  igaFunctions: [ 'role-based-policies', 'role-modeling', 'role-autoassignment' ]
  since: 3.7

- id: role-catalog
  title: Role catalog
  description: >
      Role catalog is an organization of roles into categories.
      Its primary use is to present the roles to user using user-friendly and logical organization similar to on-line shopping experience.
      Technically, midPoint role catalog is a form of organizational structure, organizing roles instead of users.
      Being an organizational structure, role catalog may specify common behavior or policy for roles organized in the catalog.
  related: [ 'rbac', 'access-request-process', 'shopping-cart', 'org' ]
  igaFunctions: [ 'role-based-policies', 'role-structure', 'access-request-ui' ]
  since:

- id: role-certification
  title: Role certification
  description: >
      Role certification is a controlled review of role definitions, a process where appropriate reviewers have to certify that access granted by a role is correct.
      Certifications are often carried out in a form of certification campaigns, certifying access of many roles at once.
      Alternatively, small micro-certifications can be triggered, certifying access of one particular role.
  related: [ 'rbac', 'role-governance', 'access-certification' ]
  igaFunctions: [ 'role-certification', 'role-based-policies', 'role-modeling', 'certification' ]
  since:

- id: role-governance
  title: Role governance
  description: >
      Governance of the role model includes specification of role owners, approvers, access control over role modification, role certification and other controls applicable to creation, maintenance and evolution of role definitions.
      Mechanisms of role governance equivalently apply to other midPoint objects, particularly to organizational units, applications and services.
  related: [ 'rbac', 'org', 'approval-process', 'authorization', 'role-certification' ]
  igaFunctions: [ 'role-based-policies', 'role-structure', 'role-modeling', 'approval-schemes', 'approval-process', 'certification', 'role-certification' ]
  since:

- id: role-mining
  title: Role mining
  description: >
      Role mining is a semi-automated mechanism to discover new role definitions based on patterns and regularities in underlying data.
      MidPoint role mining mechanism is based on machine learning techniques, suggesting new role definitions using an interactive user interface.
  related: [ 'rbac', 'assignment', 'role-wizard', 'role-governance', 'admin-gui' ]
  igaFunctions: [ 'role-mining', 'role-based-policies', 'role-structure', 'role-modeling' ]
  since: 4.8

- id: role-wizard
  title: Role wizard
  description: >
      Role wizard is a part of midPoint administration user interface, dedicated to creation of RBAC roles.
      Role wizard is usually used to easily define new application or business role in an interactive and user friendly manner.
  related: [ 'admin-gui', 'rbac' ]
  igaFunctions: [ 'role-based-policies', 'role-structure', 'role-modeling' ]
  since:

- id: schema-aware
  title: Schema-aware system
  description: >
      MidPoint is completely schema-aware, everything that midPoint does is governed by system schema.
      E.g. custom properties defined in the schema are automatically displayed in user interface, used by the wizards and so on.
  related: [ 'common-identity-model', 'extensible-object-types' ]
  igaFunctions: [ 'identity-attributes', 'customizable-reports-and-visualizations' ]
  since: 1.7

- id: schema-activation
  title: Activation schema
  description: >
      MidPoint provides off-the-shelf schema for object activation, specifying whether object is enabled (active) or disabled.
      This also includes ability to specify time intervals (from, to) when the object is active (validity time constraints).
  related: [ 'common-identity-model' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-state-tracking', 'customizable-reports-and-visualizations' ]
  since:

- id: scripting-hook
  title: Scripting hook
  description: >
      Scripting hook is a piece of scripting code that can effect many aspects of object processing and computation in midPoint.
      Scripting hook is meant as an ultimate customization mechanism for expert engineers to support complex and unusual requirements.
  since:

- id: self-registration
  title: Self-registration
  alias: [ 'Self-service registration' ]
  description: >
      Self-registration is an ability for a user to register a new account using self-service interface.
      New account has to be validated before it becomes active, e.g. by using magic link delivered by e-mail.
      Self-registration is disabled by default, it has to be explicitly enabled and properly configured.
  related: [ 'self-service-gui', 'flexible-authentication' ]
  igaFunctions: [ 'lifecycle-state-model', 'identity-state-tracking' ]
  since:

- id: self-service-password-reset
  title: Self-service password reset
  alias: [ 'Password restore' ]
  description: >
      Self-service user interface provides a mechanism enabling users to reset their own password, after a successful alternative authentication.
  related: [ 'password-management', 'self-service-gui', 'flexible-authentication' ]
  igaFunctions: [ 'credential-management' ]
  since:

- id: self-service-gui
  title: Self-service user interface
  alias: [ 'End-user GUI' ]
  description: >
      Self-service user interface is a web-based application aimed at individual users.
      It provides self-service functionality, such as review and modification of user's own profile information, password management, submission of access request and review of submitted requests.
      Technically, it is a part of administration user interface, which is dedicated to user-centric functionality.
      The user interface has a customizable look and feel.
  related: [ 'admin-gui', 'access-request', 'shipping-cart', 'role-catalog', 'access-request-ui' ]
  igaFunctions: [ 'identity-attributes', 'access-request-ui' ]
  since:

- id: semi-manual-resources
  title: Semi-manual resources
  alias: [ 'Semi-manual connectors' ]
  description: >
      Semi-manual resources are identity resources that are only partially connected using an automated (on-line) connector.
      The usual scenario allows for automated read from the resource, usually by means of CSV export from the resource.
      However, write operations (add, modify, delete) are executed manually by human administrators, based on instructions provided by midPoint.
  related: [ 'provisioning', 'provisioning-propagation', 'manual-resources', 'multi-connector-resource' ]
  igaFunctions: [ 'manual-fulfillment', 'identity-resource-management', 'communication-with-remote-systems' ]
  since:

- id: sequence
  title: Sequence
  alias: [ 'Sequential identifiers' ]
  description: >
      Sequences are persistent objects in midPoint repository that efficiently maintain sequential counters.
      Sequence can be used to assign unique identifiers to large number of midPoint objects in a very efficient and reliable fashion.
  related: [ 'mapping' ]
  igaFunctions: [ 'identity-attributes', 'identifier-management' ]
  since:

- id: service-concept
  title: Service (concept)
  description: >
      Service is one of several principal object types in midPoint.
      It is meant to define non-person identities, such as devices, "things", applications, APIs, servers and cloud services.
      Services are abstract roles, they have ability to grant privileges to other entities.
      Services are considered active entities (actors), therefore they can behave similarly to users.
      Services can be used as machine accounts.
      They have the ability log into midPoint, which is used to access midPoint REST API in a secure manner.
  related: [ 'common-identity-model', 'application-concept', 'archetype', 'rest-api' ]
  igaFunctions: [ 'identity-types' ]
  since:

- id: simulation
  title: Simulation
  description: >
      The "simulation" is an umbrella term covering various mechanisms of "what-if" analysis in midPoint.
      It could be characterized as an ability to see expected effects of some actions without the risk of damaging the system state.
  related:
  igaFunctions: [ 'simulation' ]
  unique: true
  since: 4.7

- id: sod
  title: Segregation of duties
  acronym: SoD
  description: >
      Segregation of duties (SoD) is a principle prohibiting conflicting responsibilities to be assigned to a single person.
      For example SoD may prevent a single user to hold executive as well as controlling duties.
      MidPoint SoD mechanism is implemented by using policy rules that exclude conflicting roles to be assigned to one user at the same time.
  related: [ 'rbac', 'policy-rule', 'gradual-enforcement' ]
  igaFunctions: [ 'sod' ]
  since:

- id: shopping-cart
  title: Shopping cart
  description: >
      Shopping cart is a mechanism allowing users to browse and collect roles at the beginning of access request process.
      The mechanism is designed to remind of on-line shopping experience, allowing users to start access request process in an intuitive way.
  related: [ 'access-request-process', 'role-catalog' ]
  igaFunctions: [ 'access-request-ui' ]
  since:

- id: synchronization
  title: Synchronization
  alias: [ 'Identity synchronization', 'Data synchronization' ]
  description: >
      Ability to keep identity data synchronized across many systems.
      Synchronization is a complex feature, consisting of several mechanisms and tasks, with significant variability and customizability.
      It is crucial part of identity management solution.
  related: [ 'provisioning', 'mapping', 'expression', 'reconciliation', 'live-synchronization' ]
  igaFunctions: [ 'identity-state-tracking', 'data-feed', 'reconciliation', 'data-consistency', 'orphan-detection' ]
  since: 1.7

- id: synchronization-reaction
  title: Synchronization reaction
  description: >
      At the beginning of synchronization process, midPoint determines synchronization situation for every account.
      Based on the situation, midPoint can launch synchronization reactions.
      E.g. midPoint can react to new account (situation=unmatched) by creating a new user identity (reaction=createFocus).
      Situation reactions can be set up specifically for every resource and object type, customizing the synchronization process.
  related: [ 'synchronization' ]
  igaFunctions: [ 'identity-state-tracking', 'data-feed', 'reconciliation', 'orphan-detection' ]
  since: 1.7

- id: task-management
  title: Task management
  description: >
      Task management is an internal midPoint mechanism to manage asynchronous and/or long-running tasks, distribution of work among cluster nodes and overall management of activities that midPoint conducts.
  since:

- id: threshold
  title: Threshold
  description: >
      Threshold is a mechanism to stop midPoint operation in case that a number of problems have accumulated.
      E.g. it can be used to stop synchronization task when errors start accumulating to limit the impact of the problem, avoiding large-scale damage.
  related: [ 'synchronization', 'data-feed', 'reconciliation' ]
  igaFunctions: [ 'data-feed', 'reconciliation' ]
  since: 4.0

- id: user-concept
  title: User (concept)
  description: >
      User is perhaps the most important principal object type in midPoint.
      It is meant to represent person identities, such as employee, student, staff, contractor or customer.
      User objects are stored in midPoint repository.
      They are linked to projections (accounts) stored in identity resources.
  related: [ 'common-identity-model', 'archetype', 'projection-link', 'service-concept' ]
  igaFunctions: [ 'identity-types' ]
  since:

- id: value-metadata
  title: Value metadata
  description: >
      Metadata can be maintained for every value of every item of every midPoint object.
      MidPoint can record provenance (origin), timestamps, actors and other meta-information related to data values.
  related: [ 'common-identity-model', 'object-metadata' ]
  igaFunctions: [ 'metadata-maintenance', 'identity-attributes', 'approval-accountability' ]
  status: experimental
  since: 4.9
